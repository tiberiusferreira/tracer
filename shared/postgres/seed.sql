create database tracer;
ALTER DATABASE tracer set default_statistics_target = 1000;
alter database tracer set plan_cache_mode = 'force_custom_plan';
alter database tracer set work_mem = '8MB';
CREATE EXTENSION if not exists btree_gin;
CREATE TYPE severity_level AS ENUM ('trace', 'debug', 'info', 'warn', 'error');

create domain identifier as varchar(512)
    CHECK (
        length(trim(value)) > 0
        );
comment on domain identifier is 'Non empty text with limited size of 512 chars';

create domain text_value as varchar(1572864);
comment on domain text_value is 'Text with limited size of 1572864 chars';

create domain ubigint AS bigint
    CHECK (
        value >= 0
        );

comment on domain ubigint is 'Positive Bigint';


create table orphan_event
(
    id           bigserial      not null,
    env          identifier     not null,
    service_name identifier     not null,
    timestamp    ubigint        not null,
    severity     severity_level not null,
    message      text_value     null,
    primary key (env, service_name, timestamp, id)
);
-- we select based on  (env, service_name, timestamp) and group by orphan_event.id, orphan_event.timestamp
-- we might allow severity to also be part of the query
-- we also select all (service_name, env) combinations to get the autocomplete
create index on orphan_event (service_name, env, timestamp, severity);


create table orphan_event_key_value
(
    env             identifier not null,
    service_name    identifier not null,
    timestamp       ubigint    not null,
    orphan_event_id bigint     not null,
    key             identifier not null,
    value           text_value not null,
    foreign key (env, service_name, timestamp, orphan_event_id) references orphan_event (env, service_name, timestamp, id) on delete cascade,
    primary key (env, service_name, timestamp, key)
);
create index orphan_event_env_service_name_timestamp_orphan_event_id on orphan_event_key_value (env, service_name, timestamp, orphan_event_id);
comment on index orphan_event_env_service_name_timestamp_orphan_event_id is 'For fast deletions when cascading';


create table trace
(
    env                  identifier            not null,
    service_name         identifier            not null,
    instance_id          bigint                not null,
    timestamp            ubigint               not null,
    id                   bigint                not null,


    top_level_span_name  identifier            not null,
    duration             ubigint               null,
    original_span_count  ubigint default 0     not null,
    original_event_count ubigint default 0     not null,
    stored_span_count    ubigint default 0     not null,
    stored_event_count   ubigint default 0     not null,
    estimated_size_bytes ubigint default 0     not null,
    warning_count        ubigint default 0     not null,
    has_errors           boolean default false not null,
    updated_at           ubigint               not null,
    -- sadly what makes it unique is the instance and the artificial id generated by that instance
    primary key (instance_id, id)
);
-- used for UI search grid
create index on trace (env, service_name, timestamp, top_level_span_name, duration);


create table span
(
    instance_id bigint     not null,
    trace_id    bigint     not null,
    id          bigint     not null,
    timestamp   ubigint    not null,
    parent_id   bigint,
    duration    ubigint    null,
    name        identifier not null,
    relocated   boolean    not null,
    foreign key (instance_id, trace_id) references trace (instance_id, id) on delete cascade,
    primary key (instance_id, trace_id, id),
    foreign key (instance_id, trace_id, parent_id) references span (instance_id, trace_id, id) on delete cascade
);


create table span_key_value
(
    instance_id bigint     not null,
    trace_id    bigint     not null,
    span_id     bigint     not null,
    key         identifier not null,
    value       text_value not null,
    foreign key (instance_id, trace_id, span_id) references span (instance_id, trace_id, id) on delete cascade,
    primary key (instance_id, trace_id, span_id, key)
);


create table event
(
    instance_id bigint         not null,
    trace_id    bigint         not null,
    span_id     bigint         not null,
    id          bigserial      not null,
    timestamp   ubigint        not null,
    message     text_value     null,
    severity    severity_level not null,
    relocated   boolean        not null,
    foreign key (instance_id, trace_id, span_id) REFERENCES span (instance_id, trace_id, id) on delete cascade,
    primary key (instance_id, trace_id, span_id, id)
);


create table event_key_value
(
    instance_id bigint     not null,
    trace_id   bigint     not null,
    span_id    bigint     not null,
    event_id   bigint     not null,
    key        identifier not null,
    value      text_value not null,
    foreign key (instance_id, trace_id, span_id, event_id) references event (instance_id, trace_id, span_id, id) on delete cascade,
    primary key (instance_id, trace_id, span_id, event_id, key)
);

create table alert_notification_config
(
    alert_service            identifier,
    url                      varchar(2048) not null,
    min_alert_period_seconds ubigint       not null default 3600,
    enabled                  boolean
);


create table service_alert_config
(
    env                                           identifier not null,
    service_name                                  identifier not null,
    -- Producer data
    max_export_buffer_usage                       ubigint    not null default 100000,
    max_orphan_events_per_min                     ubigint    not null default 100000,
    max_orphan_events_dropped_by_sampling_per_min ubigint    not null default 100000,
    max_spe_dropped_due_to_full_export_buffer     ubigint    not null default 100000,
    max_traces_dropped_by_sampling_per_min        ubigint    not null default 100000,
    -- Instance data
    min_instance_count                            ubigint    not null default 0,
    max_active_traces                             ubigint    not null default 100000,
    max_received_spe                              ubigint    not null default 100000,
    max_received_trace_kb                         ubigint    not null default 1000000,
    max_received_orphan_event_kb                  ubigint    not null default 1000000,
    max_trace_duration_ms                         ubigint    not null default 1000000,
    max_traces_with_warning_percentage            ubigint    not null default 100,
    max_traces_with_error_percentage              ubigint    not null default 100,
    percentage_check_time_window_secs             ubigint    not null default 60,
    percentage_check_min_number_samples           ubigint    not null default 5,

    primary key (env, service_name)
);

create table service_alert_config_trace_overwrite
(
    env                                    identifier not null,
    service_name                           identifier not null,
    top_level_span_name                    identifier not null,
    max_traces_with_warning_percentage     ubigint    not null default 100,
    max_traces_dropped_by_sampling_per_min ubigint    not null default 100000,
    max_traces_with_error_percentage       ubigint    not null default 100,
    max_trace_duration_ms                  ubigint    not null default 1000000,
    primary key (env, service_name, top_level_span_name)
);
