create database tracer;
ALTER DATABASE tracer set default_statistics_target = 1000;
alter database tracer set plan_cache_mode = 'force_custom_plan';
alter database tracer set work_mem = '8MB';

-- CREATE EXTENSION if not exists btree_gin;
CREATE TYPE severity_level AS ENUM ('trace', 'debug', 'info', 'warn', 'error');

create domain identifier as varchar(256)
    CHECK (
        length(trim(value)) > 0
        );
comment on domain identifier is 'Non empty text with limited size of 512 chars';

create domain text_value as varchar(1572864);
comment on domain text_value is 'Text with limited size of 1572864 chars';

create domain ubigint AS bigint
    CHECK (
        value >= 0
        );

comment on domain ubigint is 'Positive Bigint';


create domain u32 AS bigint
    CHECK (
        value >= 0 and value <= 4294967295
        );



create table service
(
    env  identifier not null,
    name identifier not null,
    primary key (env, name)
);

create table orphan_event
(
    id           bigserial      not null,
    env          identifier     not null,
    service_name identifier     not null,
    timestamp    ubigint        not null,
    severity     severity_level not null,
    message      text_value     null,
    primary key (id),
    foreign key (env, service_name) references service (env, name)
);
-- we select based on  (env, service_name, timestamp) and group by orphan_event.id, orphan_event.timestamp
-- we might allow severity to also be part of the query
-- we also select all (service_name, env) combinations to get the autocomplete
create index on orphan_event (env, service_name, timestamp, severity);

create table orphan_event_key_value
(
    orphan_event_id bigint     not null,
    key             identifier not null,
    value           text_value not null,
    foreign key (orphan_event_id) references orphan_event (id) on delete cascade,
    primary key (orphan_event_id, key)
);



create table trace
(
    env                        identifier            not null,
    service_name               identifier            not null,
    instance_id                bigint                not null,
    id                         bigint                not null,
    timestamp                  ubigint               not null,

    top_level_span_name        identifier            not null,
    duration                   ubigint               null,
    spans_produced             ubigint default 0     not null,
    spans_stored               ubigint default 0     not null,
    events_produced            ubigint default 0     not null,
    events_dropped_by_sampling ubigint default 0     not null,
    events_stored              ubigint default 0     not null,
    size_bytes                 ubigint default 0     not null,
    warnings                   ubigint default 0     not null,
    has_errors                 boolean default false not null,
    updated_at                 ubigint               not null,
    -- sadly what makes it unique is the instance and the artificial id generated by that instance
    primary key (instance_id, id),
    foreign key (env, service_name) references service (env, name)
);
-- used for UI search grid
create index on trace (env, service_name, timestamp, top_level_span_name, duration);


create table span
(
    instance_id bigint     not null,
    trace_id    bigint     not null,
    id          bigint     not null,
    timestamp   ubigint    not null,
    parent_id   bigint,
    duration    ubigint    null,
    name        identifier not null,
    module      text_value null,
    filename    text_value null,
    line        u32        null,
    foreign key (instance_id, trace_id) references trace (instance_id, id) on delete cascade,
    primary key (instance_id, trace_id, id),
    foreign key (instance_id, trace_id, parent_id) references span (instance_id, trace_id, id)
        on delete cascade
        deferrable initially deferred
);


create table span_key_value
(
    instance_id bigint     not null,
    trace_id    bigint     not null,
    span_id     bigint     not null,
    key         identifier not null,
    value       text_value not null,
    foreign key (instance_id, trace_id, span_id) references span (instance_id, trace_id, id) on delete cascade,
    primary key (instance_id, trace_id, span_id, key)
);
-- used to find traces by key value
create index on span_key_value (key, value, instance_id, trace_id);

create table event
(
    instance_id bigint         not null,
    trace_id    bigint         not null,
    span_id     bigint         not null,
    id          bigserial      not null,
    timestamp   ubigint        not null,
    message     text_value     null,
    module      text_value     null,
    filename    text_value     null,
    line        u32            null,
    severity    severity_level not null,
    foreign key (instance_id, trace_id, span_id) REFERENCES span (instance_id, trace_id, id) on delete cascade,
    primary key (instance_id, trace_id, span_id, id)
);

create table event_key_value
(
    instance_id bigint     not null,
    trace_id    bigint     not null,
    span_id     bigint     not null,
    event_id    bigint     not null,
    key         identifier not null,
    value       text_value not null,
    foreign key (instance_id, trace_id, span_id, event_id) references event (instance_id, trace_id, span_id, id) on delete cascade,
    primary key (instance_id, trace_id, span_id, event_id, key)
);
-- used to find traces by key value
create index on event_key_value (key, value, instance_id, trace_id);



create table service_wide_alert_config
(
    env                identifier not null,
    service_name       identifier not null,
    min_instance_count ubigint    not null default 0,
    max_active_traces  ubigint    not null default 100000,
    primary key (env, service_name),
    foreign key (env, service_name) references service (env, name) deferrable initially deferred
);


create table trace_wide_alert_config
(
    env                                 identifier not null,
    service_name                        identifier not null,
    max_trace_duration_ms               ubigint    not null default 1000000,
    max_traces_with_warning_percentage  ubigint    not null default 100,
    percentage_check_time_window_secs   ubigint    not null default 60,
    percentage_check_min_number_samples ubigint    not null default 5,
    primary key (env, service_name),
    foreign key (env, service_name) references service (env, name) deferrable initially deferred
);


create table trace_wide_alert_config_overwrite
(
    env                                identifier not null,
    service_name                       identifier not null,
    top_level_span_name                identifier not null,
    max_traces_with_warning_percentage ubigint    not null default 100,
    max_trace_duration_ms              ubigint    not null default 1000000,
    primary key (env, service_name, top_level_span_name),
    foreign key (env, service_name) references service (env, name) deferrable initially deferred
);

ALTER TABLE service
    ADD CONSTRAINT fk_service_wide_alert_config FOREIGN KEY (env, name) REFERENCES service_wide_alert_config (env, service_name) initially deferred;

ALTER TABLE service
    ADD CONSTRAINT fk_trace_wide_alert_config FOREIGN KEY (env, name) REFERENCES trace_wide_alert_config (env, service_name) initially deferred;


create table slack_alert_config
(
    id                       serial primary key,
    bot_user_oauth_token     varchar(150) not null,
    channel_id               varchar(150) not null,
    min_alert_period_seconds u32          not null default 3600,
    enabled                  boolean      not null,
    unique (bot_user_oauth_token, channel_id)
);

create table slack_alert
(
    slack_alert_config_id int           not null references slack_alert_config (id),
    notification          varchar(2048) not null,
    send_error            varchar(4096),
    created_at            timestamp     not null default NOW(),
    primary key (slack_alert_config_id, created_at)
);


create table telegram_alert_config
(
    id                       serial primary key,
    api_key                  varchar(150) not null,
    chat_id                  varchar(150) not null,
    min_alert_period_seconds u32          not null default 3600,
    enabled                  boolean      not null,
    unique (api_key, chat_id)
);

create table telegram_alert
(
    telegram_alert_config int           not null references telegram_alert_config (id),
    notification          varchar(2048) not null,
    send_error            varchar(4096),
    created_at            timestamp     not null default NOW(),
    primary key (telegram_alert_config, created_at)
);
